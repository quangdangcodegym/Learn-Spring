
-- Controller có thể trả về 1 string hoặc 1 ModelAndView, nếu trả String phải sai thêm Model model
@GetMapping("")
public String index(Model model) {

    List<Customer> customerList = customerService.findAll();
    model.addAttribute("customers", customerList);
    return "/index";
}

-- Dùng ModelAndView
 @GetMapping
public ModelAndView showListPage() {
    ModelAndView modelAndView = new ModelAndView();
    modelAndView.setViewName("customer/list");

    return modelAndView;
}
-- Khi redirect muốn add thêm thuộc tính dùng RedirectAttributes redirect
@PostMapping("/update")
public String update(@ModelAttribute Customer customer, RedirectAttributes redirect) {
    customerService.update(customer.getId(), customer);

    redirect.addFlashAttribute("success", "Add successfully");
    return "redirect:/customer";
}

### Phân biệt model và modelAttribute
//    @PostMapping("/save")
//    public String save(Customer customer, Model model) {
//        customer.setId((int) (Math.random() * 10000));
//        customerService.save(customer);
//
//        model.addAttribute("customer", new Customer());
//        return "/create";
//    }

// Ở đây có thể sài modelAttribute: đầu tiên customer sẽ được binding,
sau đó nhờ @ModelAttribute(name = "customer") thì ta ko cần addAttribute vào model nữa
@PostMapping("/save")
public String save(@ModelAttribute(name = "customer") Customer customer, Model model) {
    customer.setId((int) (Math.random() * 10000));
    customerService.save(customer);

//        model.addAttribute("customer", new Customer());     // Dòng này sẽ được thêm tự động nhờ @ModelAttribute(name = "customer")
    return "/create";
}

## Có thể định nghĩa một ModelAttribute để sài chung
@ModelAttribute("customers")
public Iterable<Customer> getAllCustomers() {
    return customerService.findAll();
}
// Cách sử dụng model Attributes
@GetMapping("")
public String index(Model model) {

//        List<Customer> customerList = customerService.findAll();          // hoạt động này ko cần thiết vì thằng model Attributes đã lấy cho mình rồi
//        model.addAttribute("customers", customerList);
    return "/index";
}

### Cú pháp thymeleaf
-- thẻ link:
<a th:href="@{/customer}">
        Back to customer list
</a>
-- thuộc tính action
<form th:action="@{/customers/save}" th:object="${customer}"
      method="POST" novalidate="novalidate">
    <input type="hidden" th:field="*{id}"/>
    <div>
        <label>Name</label>
        <input type="text" th:field="*{name}"/>
    </div>
    <div>
        <label>Email</label>
        <input type="email" th:field="*{email}"/>
    </div>
    <div>
        <label>Address</label>
        <input type="text" th:field="*{address}"/>
    </div>
    <input type="submit" value="Save"/>
</form>
th:object: nhận giá trị từ bên controller
@GetMapping("/{id}/edit")
public String edit(@PathVariable int id, Model model) {
    model.addAttribute("customer", customerService.findById(id));
    return "/edit";
}
-- th:field="*{name}": sẽ tự động gennerate ra id, name, value


### Ở file layout
<footer th:fragment="footer">
    &copy; 2021 CodeGym
</footer>
--th:fragment="footer": đánh dấu mấy thằng con có thể sài chung

### Ở file con
<footer th:replace="/layout :: footer"></footer>
-- th:replace: dùng thay thế nội dung ở thằng con mà thằng cha đã định nghĩa là chung
